find.package(devtools)
find.package("devtools")
find.package("rtools")
find.package("devtools")
find.package("devtools");
install.packages(devtools)
install.packages("devtools"")
library(devtools)
library()
>
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools);
library();
install("KernSmooth")
install(KernSmooth)
install("KernSmooth")
load(KernSmooth)
load("KernSmooth")
install.pakages(KernSmooth)
find.pakages("kernsmooth")
find.pakage("kernsmooth")
find.package("kernsmooth")
find.package("KernSmooth")
install.package("KernSmooth")
instal.package("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
clear
cl
clear()
cl()
```{r}
install.packages("swirl")
;
s
library(swirl)
swirl()
getwd()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
?swirl()
?InstallCourses()
install_from_swirl(Basic_Building_Blocks, dev = FALSE, mirror = "github")
install_from_swirl("Basic_Building_Blocks", dev = FALSE, mirror = "github")
install_from_swirl("Basic_Building_Blocks")
install_course_zip(C:\Users\User\Downloads\swirl_courses-master)
install_course_zip("C:\Users\User\Downloads\swirl_courses-master")
install_course_zip("\Users\User\Downloads\swirl_courses-master")
install_course_zip(\Users\User\Downloads\swirl_courses-master)
?install_course_zip
install_course_zip("~\Downloads\swirl_courses-master")
install_course_zip("~/Downloads/swirl_courses-master")
install_course_zip("~\Downloads\swirl_courses-master", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-maste.zipr", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-maste.zip", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master.zip")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course = "R Programming")
clear
cl
library(swirl)
install_course_directory("C:/Users/User/Downloads/swirl_courses-master")
swirl()
uninstall_all_courses()
install_course_directory("C:/Users/User/Downloads/swirl_courses-master/swirl_courses-master")
swirl()
swirl()
uninstall_all_courses()
install_course_directory("C:/Users/User/Downloads/swirl_courses-master/swirl_courses-master/R_Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4 ) + c(0, 10)
c(1, 2, 3, 4 ) + c(0, 10, 100)
z*2 + 1000
my_div
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!'
)
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0)
)
evaluate(function(x){x[1]+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)}, c(8, 4, 0))
evaluate(function(x){len <- length(x); x[len]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("this", "is", "a", "test")
submit()
submit()
mad_libs(place = "UNB", adjective = "happy", noun = "cats")
submit()
"I" p "love" p "R"
"I"p"love"p"R!"
"I"%p%"love"%p%"R!"
swirl()
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col = "red", pch = 8)
xyplot(Ozone~Wind, airquality, col = "red", pch = 8, main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month), airquality)
xyplot(Ozone~Wind|as.factor(Month), airquality, layout=c(5,1))
xyplot(Ozone~Wind|Month, airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(),10)
pal <- colorRamp(c("red","blue")
)
pal(0)
pal(1)
pal(seq(1,0,len=6)
)
pal(seq(0,1,len=6))
colorRampPalette(c("red","blue")
)
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
colorRampPalette(c("red","yellow"))
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
play()
showMe(p2(20))
showMe(p1(20))
nxt()
showMe(p2(2))
p1
?p1
?rgb
p3 <- colorRampPalette(c(blue, green),alpha = .5)
p3 <- colorRampPalette(c("blue", "green"),alpha = .5)
p3(5_
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5)
)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3)
)
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorR
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
rm(list=ls())
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4, col="red")
5
9
12
abline(.05)
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col= c("red","orange","purple"),pch=3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,wich.min(
apply(distTmp2,2,wich.min)
apply(distTmp2,2,wich.min())
apply(distTmp2,2,which.min())
apply(distTmp2,2,which.min)
points(x,y,pch=10,cex=2,col=cols1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
poinst(kmObj$centers, col = c("black","red","green"), pch=3,cex=3,lwd=3)
points(kmObj$centers, col = c("black","red","green"), pch=3,cex=3,lwd=3)
plot(x,y,means(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col = kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(swirl)
rm(list=ls())
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
swirl()
swirl()
swirl()
View(mat)
mat
svd(mat)
matu %*% matv
matu %*% diag %*% matv
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
setwd("GitHub")
ls()
dir()
setwd(dir()[6])
readRDS("Source_Classification_Code.rds")
ClassCode <- readRDS("Source_Classification_Code.rds")
str(ClassCode)
levels(ClassCode$Option.Group)
levels(ClassCode$Option.Set)
levels(ClassCode$SCC.Level.One)
levels(ClassCode$SCC.Level.Two)
levels(ClassCode$SCC.Level.Three)
